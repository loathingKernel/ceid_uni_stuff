#ifndef ITEM_H
#define ITEM_H

#include <iostream>

using namespace std;

/**
 * \class Item
 * \brief Base class for all other items.
 *
 * Base abstract class to subclassed by the Pen, Pencil, Paper and Notebook
 * specialized classes. Implements the common functions of setting
 * the common characteristics of items, namely the Name, Stock, Descritpion.
 * Implements getters for common characteristics of items as well as virtual
 * functions that should be re-implemented in each item category.
 */
class Item
{
public:
    /**
     * \brief Constructor for Item, called by the derivative classes
     *
     * @param stock <int>.The stock the item should be created with
     * @param price <double> The price of the item
     * @param name <string> The name of the item, doesn't need to be unique
     * @param desc <string> The description of the item
     */
    Item(int stock, double price, string name, string desc);
    /**
     * \brief Virtual destructor to force the reimplementation in the derivatives
     */
    virtual ~Item();

    /**
     * \brief Get the ID of the item
     *
     * The ID of an item is a 4 digit hash generated by the defining
     * characteristics of each item. The hash is computed by each derivative class
     *
     * @return <size_t> The item's hash
     */
    size_t getId();

    /**
     * \brief Set the stock of an item
     *
     * @param stock <int> The stock to set
     */
    void setStock(int stock);
    int  getStock();

    /**
     * \brief Set the price of an item
     *
     * @param price <double> The price to set
     */
    void   setPrice(double price);
    double getPrice();

    /**
     * \brief Set the stock of an item
     *
     * @param name <string> The name to set
     */
    void   setName(string name);
    string getName();

    /**
     * \brief Set the stock of an item
     *
     * @param desc <string> The description to set
     */
    void   setDescription(string desc);
    string getDescription();

    string getCategory();
    string getBasicInfo();

    virtual void setId() = 0;
    virtual void setId(size_t);
    virtual void setCategory(string);
    virtual string getDetails() = 0;

    operator std::string ();
    friend ostream& operator<<(ostream&, Item&);

    bool operator==(const Item&);

private:
    size_t _id = 0;
    int    _stock;
    double _price;
    string _name;
    string _desc;
    string _category;
};

#endif // ITEM_H
